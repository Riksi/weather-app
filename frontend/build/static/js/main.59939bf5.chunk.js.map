{"version":3,"sources":["index.js"],"names":["window","onload","map","marker","latInput","document","getElementById","lonInput","near","clear","locations","neighbours","presentNearestIdx","init","neighboursOf","sendData","Streamlit","setComponentValue","state","getLatLng","lat","lng","presentNearest","circle","data","usaf","wban","getState","clearNear","forEach","n","removeLayer","style","display","roundString","x","Math","round","showPopup","elem","before","after","lon","content","undefined","bindPopup","openPopup","hidePopup","closePopup","changeMapState","latLng","setLatLng","update","panTo","changeMarker","latval","parseFloat","value","lonval","isNaN","onMapClick","e","latlng","inp","onfocus","classList","add","onblur","remove","onchange","onclick","l","idx","L","circleMarker","radius","addTo","stname","start","end","on","DomEvent","stopPropagation","circlelatLng","setStyle","color","push","fitBounds","events","addEventListener","RENDER_EVENT","detail","args","setView","tileLayer","maxZoom","attribution","initialise","abs","console","warn","setFrameHeight","setComponentReady"],"mappings":"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","file":"static/js/main.59939bf5.chunk.js","sourcesContent":["import L from 'leaflet';\nimport { Streamlit } from \"streamlit-component-lib\"\n    \n    window.onload = function(){\n        // Input elements\n        var latInput = document.getElementById(\"lat\");\n        var lonInput = document.getElementById(\"lon\");\n        var near = document.getElementById(\"near\");\n        var clear = document.getElementById(\"clear\");\n        var inputs = [latInput, lonInput];\n\n        // Map\n        var map;\n        var marker;\n        \n        // Neighbours\n        var locations = [];\n        var neighbours = [];\n        var presentNearestIdx = null;\n        var init = true;\n        var neighboursOf = null;\n        // var isFocused = false;\n\n        \n\n        inputs.forEach(inp => {\n\n            inp.onfocus = function(){\n                inp.classList.add('focused')\n            }\n            \n            inp.onblur = function() {\n                inp.classList.remove('focused')\n            }\n\n        })\n        \n\n        function getState(){\n            var state = {}\n            state['marker'] = {\n                'lat': marker.getLatLng().lat, \n                'lon': marker.getLatLng().lng\n            }\n            if (presentNearestIdx !== null){\n                var presentNearest = neighbours[presentNearestIdx];\n                state['ws'] = {\n                    'idx': presentNearestIdx,\n                    'lat': presentNearest.circle.getLatLng().lat, \n                    'lon': presentNearest.circle.getLatLng().lng,\n                    'usaf': presentNearest.data.usaf,\n                    'wban': presentNearest.data.wban\n                }\n            } else {\n                state['ws'] = null\n            }\n            state['for'] = neighboursOf\n            return state\n        }\n\n        function sendData(){\n            Streamlit.setComponentValue(getState())\n        }\n\n        function getLatLng(){\n            var latval = parseFloat(latInput.value);\n            var lonval = parseFloat(lonInput.value);\n\n            if (!(isNaN(latval) || isNaN(lonval))){\n                return [latval, lonval];\n            }\n            else{\n                return null\n            }\n        }\n\n        function clearNear(){\n            neighbours.forEach(function(n){\n                map.removeLayer(n.circle);\n            });\n            neighbours = [];\n            clear.style.display = \"none\";\n            presentNearestIdx = null;\n            neighboursOf = null;\n\n            // near.value = \"Find stations nearby\";\n        }\n        \n        function showNear(){\n            clearNear();\n\n            var latLng = marker.getLatLng()\n            // console.log('Showing near', latLng.lat, latLng.lng)\n            \n\n            neighboursOf = {\"lat\": latLng.lat, \"lon\": latLng.lng};\n            \n            clear.style.display = \"inline-block\";\n            locations.forEach(\n                (l, idx)=>{\n                    var circle = L.circleMarker(\n                        [l['lat'], l['lon']],\n                        {radius: 12}\n                    ).addTo(map);\n                    var before =  `<strong>${l.stname}</strong>`\n                    before += `<br>USAF: ${l.usaf}, WBAN: ${l.wban}`\n                    var after = `Available dates: ${l.start} to ${l.end}`\n                    \n                    circle.on('mouseover', ()=>{\n                        showPopup(\n                            circle,\n                            before, after\n                        )\n                    })\n                    circle.on('mouseout', ()=>{\n                        hidePopup(circle)\n                    })\n                    circle.on(\n                        'click',\n                        (e)=>{\n                            L.DomEvent.stopPropagation(e);\n                            \n                            // console.log('circle', latLng.lat, latLng.lng)\n                            var circlelatLng = circle.getLatLng();\n                            changeMapState([circlelatLng.lat, circlelatLng.lng])\n\n                            if(presentNearestIdx != idx){\n\n                                showPopup(\n                                    circle,\n                                    before, after\n                                )\n                                \n    \n                                latInput.value = circlelatLng.lat;\n                                lonInput.value = circlelatLng.lng;\n                                \n                                if(presentNearestIdx !== null){\n                                    neighbours[presentNearestIdx].circle.setStyle({color: '#3388ff'});\n                                }\n                                \n                                circle.setStyle({color: '#f03'});\n                                presentNearestIdx = idx;\n                            }\n                            else{\n                                circle.openPopup();\n                            }\n                            \n                            sendData();\n                        }\n                        \n                    )\n                    neighbours.push({\n                        circle: circle,\n                        data: l\n                    });\n                }\n            )\n            map.fitBounds(neighbours.map(function(n){return n.circle.getLatLng()}));\n        }\n\n        function roundString(x){\n            return (Math.round(x * 10**4) / 10**4) + \"\"\n        }\n\n        function showPopup(elem, before, after){\n            var lat = roundString(elem.getLatLng().lat);\n            var lon = roundString(elem.getLatLng().lng);\n            var content =  `Lat: ${lat}, Lon: ${lon}`\n            if (before !== undefined){\n                content = before + \"<br>\" + content;\n            }\n            if (after !== undefined){\n                content = content + \"<br>\" + after;\n            }\n            elem.bindPopup(content).openPopup();\n        }\n\n        function hidePopup(elem){\n            elem.closePopup();\n        }\n\n        function changeMapState(latLng){\n            marker.setLatLng(latLng).update();\n                map.panTo(latLng);\n                showPopup(marker);\n                // if (neighboursOf !== null){\n                //     near.value = \"Update\";\n                // }\n            \n        }   \n\n        function changeMarker() {\n            var latLng = getLatLng();\n\n            if (latLng !== null){\n                changeMapState(latLng);\n                sendData();\n            }\n        }\n\n        function onMapClick(e) {\n            var latval = e.latlng.lat;\n            var lonval = e.latlng.lng;\n\n            latInput.value = latval;\n            lonInput.value = lonval;\n            // console.log('click', latval, lonval);\n\n            changeMapState([latval, lonval]);\n            sendData();\n        }\n\n        function initialise(lat, lon){\n            var latLng = [lat, lon];\n\n            // Map\n            map = L.map('map').setView(latLng, 10);\n            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                maxZoom: 19,\n                attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n            }).addTo(map);\n            map.on('click',  onMapClick);\n\n            // Marker\n            marker = L.marker(latLng).addTo(map);\n\n            \n\n            marker.on('click', (e)=>{\n                    showPopup(marker);\n                    L.DomEvent.stopPropagation(e);\n                }\n            )\n            marker.on('mouseover', (e)=>{\n                    showPopup(marker);\n                }\n            )\n            marker.on('mouseout', (e)=>{\n                hidePopup(marker);\n            })\n            \n            \n            latInput.value = lat;\n            lonInput.value = lon;\n        }\n\n        latInput.onchange = changeMarker;\n        lonInput.onchange = changeMarker;\n        near.onclick = showNear;\n        clear.onclick = clearNear;\n\n        Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, (e)=>{\n            var data = e.detail\n            locations = data.args['data'];\n            \n            \n            // Maintain compatibility with older versions of Streamlit that don't send\n            // a theme object.\n            // if (data.theme) {\n            //     // Use CSS vars to style our button border. Alternatively, the theme style\n            //     // is defined in the data.theme object.\n            //     const borderStyling = `1px solid var(${\n            //     isFocused ? \"--primary-color\" : \"gray\"\n            //     })`\n            //     inputs.forEach(\n            //         (inp)=>{\n            //             inp.style.border = borderStyling\n            //             inp.style.outline = borderStyling\n            //         }\n            //     )\n            // }\n            \n            // if init update lat and lon\n            // otherwise assert difference is small\n            if(init){\n                var lat = data.args['lat'];\n                var lon = data.args['lon'];\n                initialise(lat, lon);\n                init = false;\n                // console.log('RENDER_EVENT:', lat, lon);\n            }\n            else{\n                var eps = 1e-6;\n                var latval = parseFloat(latInput.value);\n                var lonval = parseFloat(lonInput.value);\n                if (Math.abs(latval - data.args['lat']) > eps || Math.abs(lonval - data.args['lon']) > eps){\n                    console.warn('WARNING: lat and lon are not the same as the ones in the event', latval, lonval, data.args['lat'], data.args['lon']);\n                }\n                // else{\n                //     console.log('RENDER_EVENT: lat and lon are the same as the ones in the event');\n                // }\n            }\n            Streamlit.setFrameHeight(1000);\n        })\n\n        Streamlit.setComponentReady();\n        Streamlit.setFrameHeight(1000);\n    }\n        \n"],"sourceRoot":""}